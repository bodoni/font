extern crate font as library;

mod common;

use common::{setup, trace, Fixture};

#[test]
fn draw_a() {
    let font = &setup(Fixture::VesperLibre)[0];
    let glyph = font.case.draw('a').unwrap().unwrap();
    assert_eq!(glyph.len(), 2);
    #[rustfmt::skip]
    assert_eq!(&trace(&glyph), &vec![
        ( 68.0, 241.0),
        (102.0, 389.0),
        (218.0, 475.0),
        (364.5, 512.0),
        (531.0, 524.0),
        (611.0, 521.0),
        (611.0, 575.0),
        (590.5, 742.5),
        (510.0, 851.0),
        (454.5, 869.0),
        (382.0, 875.0),
        (315.0, 868.0),
        (281.0, 686.0),
        (220.0, 671.0),
        (166.5, 686.0),
        (121.0, 726.0),
        (103.0, 779.0),
        (187.0, 879.0),
        (305.5, 928.0),
        (436.5, 962.5),
        (530.0, 975.0),
        (729.0, 894.0),
        (790.0, 674.0),
        (790.0, 192.0),
        (869.0, 129.5),
        (963.0,  93.0),
        (951.0,  35.0),
        (835.5,  -6.5),
        (723.0, -25.0),
        (687.5,  59.0),
        (638.0, 132.0),
        (562.0,  62.5),
        (443.5,   0.0),
        (326.0, -25.0),
        (180.0,  15.5),
        ( 95.0, 117.0),
        ( 68.0, 241.0),

        (356.0, 112.0),
        (390.0, 106.0),
        (501.5, 124.5),
        (611.0, 165.0),
        (611.0, 458.0),
        (440.0, 433.0),
        (327.0, 394.5),
        (271.0, 357.0),
        (252.0, 291.0),
        (266.5, 219.0),
        (305.0, 151.5),
        (356.0, 112.0),
    ]);
}

#[test]
fn draw_a_ring() {
    let font = &setup(Fixture::OpenSans)[0];
    let glyph = font.case.draw('å').unwrap().unwrap();
    assert_eq!(glyph.len(), 4);
    #[rustfmt::skip]
    assert_eq!(&trace(&glyph), &vec![
        ( 639.0, 1116.0),
        ( 803.0, 1066.5),
        ( 915.0,  924.0),
        ( 926.0,  924.0),
        ( 993.0, 1096.0),
        (1120.0, 1096.0),
        ( 887.0,    0.0),
        ( 754.0,    0.0),
        ( 780.0,  209.0),
        ( 772.0,  209.0),
        ( 395.0,  -20.0),
        ( 177.0,   79.0),
        (  98.0,  350.0),
        ( 169.0,  736.0),
        ( 365.0, 1015.0),
        ( 639.0, 1116.0),
        ( 449.0,  119.0),
        ( 642.0,  211.5),
        ( 798.0,  452.5),
        ( 858.0,  750.0),
        ( 802.0,  914.0),
        ( 655.0,  975.0),
        ( 461.5,  889.0),
        ( 321.0,  656.0),
        ( 270.0,  346.0),
        ( 317.0,  175.5),
        ( 449.0,  119.0),

        ( 951.0, 1456.0),
        ( 891.0, 1299.0),
        ( 732.0, 1241.0),
        ( 572.0, 1298.5),
        ( 513.0, 1454.0),
        ( 575.0, 1606.5),
        ( 732.0, 1665.0),
        ( 892.0, 1608.0),
        ( 951.0, 1456.0),
        ( 847.0, 1454.0),
        ( 815.0, 1538.0),
        ( 732.0, 1569.0),
        ( 650.0, 1538.0),
        ( 617.0, 1454.0),
        ( 646.5, 1369.5),
        ( 732.0, 1339.0),
        ( 815.0, 1369.5),
        ( 847.0, 1454.0)
    ]);
}

#[test]
fn draw_copyright() {
    let font = &setup(Fixture::OpenSans)[0];
    let glyph = font.case.draw('©').unwrap().unwrap();
    assert_eq!(glyph.bounding_box, (139.0, -20.0, 1642.0, 1483.0));
    assert_eq!(glyph.side_bearings, (139.0, 62.0));
}

#[test]
fn draw_from_a_to_z() {
    let font = &setup(Fixture::OpenSans)[0];
    for code in b'a'..(b'z' + 1) {
        font.case.draw(code as char).unwrap().unwrap();
    }
}

#[test]
fn draw_o() {
    let font = &setup(Fixture::OpenSans)[0];
    let glyph = font.case.draw('o').unwrap().unwrap();
    assert_eq!(glyph.len(), 2);
    #[rustfmt::skip]
    assert_eq!(&trace(&glyph), &vec![
        ( 643.0, 1110.0),
        ( 943.0,  997.5),
        (1053.0,  688.0),
        ( 981.0,  333.0),
        ( 786.0,   75.0),
        ( 508.0,  -16.0),
        ( 207.0,   97.0),
        (  98.0,  406.0),
        ( 171.0,  763.5),
        ( 368.0, 1020.5),
        ( 643.0, 1110.0),

        ( 879.0,  711.0),
        ( 816.5,  897.5),
        ( 647.0,  969.0),
        ( 451.5,  895.0),
        ( 317.5,  689.5),
        ( 270.0,  397.0),
        ( 333.5,  194.5),
        ( 516.0,  123.0),
        ( 703.0,  196.0),
        ( 832.5,  403.5),
        ( 879.0,  711.0),
    ]);
}

#[test]
fn draw_slash() {
    let font = &setup(Fixture::OpenSans)[0];
    let glyph = font.case.draw('/').unwrap().unwrap();
    assert_eq!(glyph.len(), 1);
    #[rustfmt::skip]
    assert_eq!(&trace(&glyph), &vec![
        (893.0, 1462.0),
        ( 80.0,    0.0),
        (-94.0,    0.0),
        (719.0, 1462.0),
        (893.0, 1462.0),
    ]);
}

#[test]
fn open() {
    let file = setup(Fixture::OpenSans);
    let font = &file[0];
    assert_eq!(font.units_per_em, 2048);
    assert_eq!(font.ascender, 2189);
    assert_eq!(font.descender, -600);
}
